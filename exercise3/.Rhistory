top3 = head(sort(table(subset(data$Game, data$Game!="Other")), decreasing=TRUE), n=3)
sum top3
sum(top3)
sum(subset(data$Game, data$Game!="Other"))
sum(table(subset(data$Game, data$Game!="Other")))
table(subset(data$Game, data$Game!="Other"))
table(subset(data$Game, data$Game!="Other" && data.Game!=""))
table(subset(data$Game, data$Game!="Other" && data$Game!=""))
table(subset(data$Game, data$Game!="Other" && data$Game!=" "))
table(subset(data$Game, data$Game!="Other" && data$Game!=""))
table(subset(data$Game, data$Game!="Other" || data$Game!=""))
table(subset(data$Game, data$Game!="Other" || data$Game!=" "))
table(subset(data$Game, data$Game!="Other"))
table(subset(data$Game, data$Game!=""))
table(subset(data$Game, data$Game!=" "))
table(subset(data$Game, data$Game!=NA))
table(subset(data$Game, data$Game!=' '))
table(subset(data$Game, data$Game!=" "))
View(data)
table(subset(data$Game, data$Game != ""))
table(subset(data$Game, data$Game != "Other"))
table(subset(data$Game, data$Game != ""))
table(subset(data$Game, data$Game != "" && data$Game != "Other"))
table(subset(data$Game, data$Game != "" || data$Game != "Other"))
table(subset(data$Game, data$Game != "" | data$Game != "Other"))
table(subset(data$Game, data$Game != "" & data$Game != "Other"))
gameStats = table(subset(data$Game, data$Game != "" & data$Game != "Other"))
sum(top3)
sum(gameStats)
sum(top3)/sum(gameStats)
sprintf("%1.2f%%", 100*sum(top3)/sum(gameStats))
top3proportion = sum(top3)/sum(gameStats)
top3proportion
sprintf("%1.2f%%", 100*top3proportion))
sprintf("%1.2f%%", 100*top3proportion)
head(sort(table(subset(data$Game, data$Game!="Other")), decreasing=TRUE), n=3)
subset(data, data$Game==WoW)
subset(data, data$Game=="WoW")
table(subset(data, data$Game=="WoW"))
summary(subset(data, data$Game=="WoW"))
which(data$Game=="WoW")
wowset = table(subset(data, data$Game=="WoW"))
nrow(table(subset(data, data$Game=="WoW"))
nrow
table(subset(data, data$Game=="WoW"))
subset(data, data$Game=="WoW")
ncol(subset(data, data$Game=="WoW"))
nrow(subset(data, data$Game=="WoW"))
wowSet
wowSet = subset(data, data$Game=="WoW")
top3
eq2Set = subset(data, data$Game=="EQ2")
eqSet = subset(data, data$Game=="EQ")
tapply(wowSet$Hours, wowSet$Gender, mean, na.rm=TRUE)
View(wowSet)
View(wowSet)
tapply(wowSet$Hours, wowSet$Gender, mean, na.rm=TRUE)
tapply(wowSet$Hours, wowSet$Gender, max, na.rm=TRUE)
tapply(wowSet$Hours, wowSet$Gender, mean, na.rm=TRUE)
tapply(eqSet$Hours, eqSet$Gender, mean, na.rm=TRUE)
tapply(eq2Set$Hours, eq2Set$Gender, mean, na.rm=TRUE)
female     male
27.00000 24.22414 20.66848
tapply(eq2Set$Hours, eq2Set$Gender, mean, na.rm=TRUE)
female     male
27.00000 24.22414 20.66848
View(eq2Set)
View(eq2Set)
tapply(eq2Set$Hours, eq2Set$Gender, mean, na.rm=TRUE)
tapply(eq2Set$Hours, eq2Set$Gender, max, na.rm=TRUE)
tapply(wowSet$Hours, wowSet$Gender, max, na.rm=TRUE)
tapply(eqSet$Hours, eqSet$Gender, max, na.rm=TRUE)
tapply(data$Age, data$Game, mean, na.rm=TRUE)
sort(tapply(data$Age, data$Game, mean, na.rm=TRUE), descending=TRUE)
sort(tapply(data$Age, data$Game, mean, na.rm=TRUE), decreasing=TRUE)
sort(tapply(data$Age, data$Game, mean, na.rm=TRUE), decreasing=TRUE)
sort(tapply(data$Age, data$Game, median, na.rm=TRUE), decreasing=TRUE)
factor(cut(data$Game, breaks=nclass.Sturges(data$Game)))
as.data.frame(table(data$Game))
freqTable = as.data.frame(table(data$Game))
freqTable = transform(freqTable, relative = prop.table(Freq))
freqTable
plot(freqTable)
plot(freqTable$Freq)
plot(freqTable$relative)
hist(freqTable$relative)
hist(freqTable$Freq)
hist(freqTable$Var1)
barplot(freqTable$Var1)
barplot(freqTable)
barplot(freqTable$Freq)
barplot(freqTable$Freq, names.arg=freqTable$Var1)
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=1000)
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim="1000")
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=500)
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=c(0,500))
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=c(0,1500))
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=c(0,2000))
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=c(0,2000), inside=TRUE)
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=c(0,2000), log=TRUE)
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=c(0,2000), density =1)
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=c(0,2000))
pie(freqTable$relative, labels = freqTable$Var1, col=rainbow(length(freqTable$Var1)),
main="Pie Chart of Countries")
pie(freqTable$relative, labels = freqTable$Var1, col=rainbow(length(freqTable$Var1)),
main="Relative popularity of MMORPGs")
pie(freqTable$relative, labels = freqTable$Var1, col=rainbow(length(freqTable$Var1)), main="Relative popularity of MMORPGs")
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=c(0,2000))
barplot(freqTable$Freq, names.arg=freqTable$Var1, ylim=c(0,2000), col=rainbow(length(freqTable$Var1)))
pie(freqTable$relative, labels = freqTable$Var1, col=rainbow(length(freqTable$Var1)), main="Relative popularity of MMORPGs")
freqTable
sort(freqTable)
order(freqTable)
order(freqTable$Freq)
sort(freqTable$Freq)
freqTable$Freq
freqTable
pie(sort(freqTable$relative), labels = freqTable$Var1, col=rainbow(length(freqTable$Var1)), main="Relative popularity of MMORPGs")
barplot(sort(freqTable$Freq), names.arg=freqTable$Var1, ylim=c(0,2000), col=rainbow(length(freqTable$Var1)))
barplot(as.matrix(table(freqTable$relative)), beside = FALSE)
barplot(as.matrix(table(freqTable$relative)))
barplot(as.matrix(table(freqTable$Freq)))
barplot(as.matrix(table(freqTable$Freq)))
as.matrix(table(freqTable$Freq))
freqTable$Freq
View(freqTable)
table(View(freqTable))
table(freqTable)
table([,freqTable])
table(freqTable)
table(freqTable$Freq)
data.frame()
data.frame(t(freqTable$Freq))
as.data.frame(t(freqTable$Freq))
as.data.frame(t(freqTable$Freq))
data.frame(t(freqTable$Freq))
packages.install(ggplot)
install.packages(ggplot)
install.packages("ggplot")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
ggplot(data=freqTable)
ggplot(data=freqTable$relative)
ggplot(data=freqTable) + geom_bar()
ggplot(data=freqTable, aes(x = freqTable.Length, y = freqTable.Width)) + geom_bar()
ggplot(data=freqTable, aes(x = freqTable.Var1, y = freqTable.Freq)) + geom_bar()
ggplot(data=freqTable, aes(x = freqTable$Var1, y = freqTable$Freq)) + geom_bar()
ggplot(data=freqTable, aes(x = freqTable$Var1, y = freqTable$relative)) + geom_bar()
ggplot(data=freqTable, aes(x = freqTable$Var1, y = freqTable$Freq)) + geom_bar()
ggplot(data=freqTable, aes(x = freqTable$Var1, y = freqTable$Freq, color = freqTable$Var1)) + geom_bar()
ggplot(data=freqTable, aes(x = freqTable$Var1, y = freqTable$Freq, color = freqTable$Var1, fill = variable)) + geom_bar()
ggplot(data=freqTable, aes(x = freqTable$Var1, y = freqTable$Freq, color = freqTable$Var1)) + geom_bar()
ggplot(data=freqTable, aes(x = freqTable$Var1, y = freqTable$Freq, color = freqTable$Var1)) + geom_bar(stat=identity)
ggplot(data=freqTable, aes(x = freqTable$Var1, y = freqTable$Freq, color = freqTable$Var1)) + geom_bar()
ggplot(data=freqTable, aes(x = freqTable$Var1, y = freqTable$Freq, color = freqTable$Var1)) + geom_bar(stat = "identity")
ggplot(data=freqTable, aes(x = freqTable$Var1, y = freqTable$Freq, color = freqTable$Var1, fill=variable)) + geom_bar(stat = "identity")
freqTable>>=
freqTable
<< freqTable>>=
@
@asdfsdf
\end{document}
@
<< frequeuncy_table>>=
<<frequeuncy_table>>=
sort(freqTable)
sort(tapply(data$Age, data$Game, mean, na.rm=TRUE), decreasing=TRUE)
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
summary(cars)
data$Game
summary(cars)
summary(data)
mmorpg = data
summary(mmorpg)
show freqTable
freqTable
as.data.frame(table(data$Game))
data$Game
freqTable
barplot(sort(freqTable$Freq), names.arg=freqTable$Var1, ylim=c(0,2000), col=rainbow(length(freqTable$Var1)))
dev.new(width=5, height=4)
barplot(sort(freqTable$Freq), names.arg=freqTable$Var1,cex.names = 0.65, ylim=c(0,2000), col=rainbow(length(freqTable$Var1)))
barplot(sort(freqTable$Freq),
names.arg=freqTable$Var1,
cex.names = 0.65,
ylim=c(0,2000),
col=rainbow(length(freqTable$Var1)))
eq2Set = subset(data, data$Game=="EQ2")
View(data)
setwd("~/Code/computational network analysis/exercise 3")
g <- read.graph(file="SmallW.net", format="pajek")(
g <- read.graph(file="SmallW.net", format="pajek")
g
g <- read.graph(file="SmallW.net", format="pajek")
install.packages("igraph")
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
g <- read.graph(file="SmallW.net", format="pajek")
g
plot(g)
V(g)
vcount(g)
ecount(g)
E(g)
shortest.paths(g)
average.path.length(g)
average.path.length(g, directed=FALSE)
degree(g)
mean(degree(g))
plot.igraph(g)
plot.igraph(g, layout=layout.kamada.kawai)
plot.igraph(g, layout=layout.spring)
plot.igraph(g, layout=layout.spring, size = 2)
plot.igraph(g, layout=layout.spring, vertex.size = 2)
plot.igraph(g, layout=layout.spring, vertex.size = 2, vertex.label=NA)
plot.igraph(g, layout=layout.spring, vertex.size = 2, vertex.label=NA, edge.size=2)
plot.igraph(g, layout=layout.spring, vertex.size = 2, vertex.label=NA, edge.arrow.width=2)
plot.igraph(g, layout=layout.spring, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2, layout=layout.kamada.kawai)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2, layout=layout.kamada.kawai, margin = -2)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2, layout=layout.kamada.kawai, margin = -20)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2, layout=layout.kamada.kawai, margin = -10)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2, layout=layout.kamada.kawai, margin = 10)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2, layout=layout.kamada.kawai, margin = 0)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2, layout=layout.kamada.kawai, margin = -5)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2, layout=layout.kamada.kawai)
tkplot(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2, layout=layout.kamada.kawai)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2, layout=layout.kamada.kawai * 2)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.02, edge.width = 0.2, layout=layout.kamada.kawai)
plot.igraph(g, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.02, edge.arrow.size=0.2, edge.width = 0.2, layout=layout.kamada.kawai)
degree(g)
E(g)
g
E(g) [from()]
E(g) [from(:)]
betweenness(g)
centralization.betweenness(g)
centralization.degree(g)
degree = degree(g)/(length(g)-1)
degree
sum(max(x)-x)/(length(x)-1)
sum(max(g)-g)/(length(g)-1)
sum(max(degree)-degree)/(length(degree)-1)
centralization.degree(g)
sum(max(degree(g))-degree(g))/(length(degree(degree))-1)
sum(max(degree(g))-degree(g))/(length(degree(g))-1)
sum(max(degree(g))-degree(g))/(length(degree(g))-1)*(length(degree(g))-2)
max(degree(g))
max(degree(g)) - degree(g)
degree(g)
degree(g, normalized=true)
degree(g, normalized=TRUE)
max(degree(g, normalized=TRUE)) - degree(g, normalized=TRUE)
sum(max(degree(g, normalized=TRUE)) - degree(g, normalized=TRUE))
sum(max(degree(g, normalized=TRUE)) - degree(g, normalized=TRUE))/((length(g) -1) * (length(g) -2))
centralization.degree(g)
sum(max(degree(g, normalized=TRUE)) - degree(g, normalized=TRUE))/(length(g) -1)
sum(max(degree(g, normalized=TRUE)) - degree(g, normalized=TRUE))/((length(g) -1) * (length(g) -2))
sum(max(degree(g, normalized=TRUE)) - degree(g, normalized=TRUE))/((length(g) -1)^2 * (length(g) -2))
centralization.degree(g, mode = "all")
centralization.degree(g, mode = "in")
centralization.degree(g, mode = "out")
centralization.degree(g, mode = "total")
sum(max(degree(g, normalized=TRUE)) - degree(g, normalized=TRUE))/((length(g) -1)^2 * (length(g) -2))
degree_centralization = function(x){um(max(degree(x, normalized=TRUE)) - degree(x, normalized=TRUE))/((length(x) -1)^2 * (length(x) -2))}
degree_centralization(g)
degree_centralization = function(x){sum(max(degree(x, normalized=TRUE)) - degree(x, normalized=TRUE))/((length(x) -1)^2 * (length(x) -2))}
degree_centralization(g)
betweenness(g)
degree_betweenness = function(x){
sum(max(
betweenness(x, normalized=TRUE)) - betweenness(x, normalized=TRUE)
) / ((length(x) -1)^2 * (length(x) -2))
}
betweennes_centralization = function(x){
sum(max(
betweenness(x, normalized=TRUE)) - betweenness(x, normalized=TRUE)
) / ((length(x) -1)^2 * (length(x) -2))
}
betweennes_centralization(g)
centralization.betweenness(g)
betweennes_centralization(g)
closeness(g)
centralization.closeness(g)
edgree(g)
degree(g)
mean(degree(g))
max(degree(g))
mean(closeness(g))
max(closeness(g))
closeness(g)
betweenness(g)
mac(betweenness(g))
max(betweenness(g))
mean(betweenness(g))
betweennes_centralization(g)
centralization.betweenness(g)
centralization.betweenness(g)
betweenness.estimate(g)
betweenness(g)
degree(g)
max(degree(g))
median(degree(g))
median(betweenness(g))
mean(betweenness(g))
betweennes(g)
betweenness(g)
betweenness(g)
setwd("~/Code/computational network analysis")
wikilinks <- read.graph(file="project/out.wikpedia_link_de", format="tsv")
wikilinks <- read.csv(file="project/out.wikpedia_link_de", sep='\t')
wikilinks <- read.csv(file="project/wikipedia_link_de/out.wikpedia_link_de", sep='\t')
setwd("~/Code/computational network analysis/project")
setwd("~/Code/computational network analysis/project/wikipedia_link_de")
wikilinks <- read.csv(file="out.wikpedia_link_de", sep='\t')
wikilinks <- read.csv(file="out.wikipedia_link_de", sep='\t')
setwd("~/Code/computational network analysis/project/wikispeedia_paths-and-graph")
wikilinks <- read.csv(file="paths_finished.tsv", sep='\t')
plot.igraph(wikilinks)
View(wikilinks)
View(wikilinks)
View(wikilinks)
View(wikilinks)
wikilinks = read.graph(file="paths_finished.tsv")
setwd("~/Code/computational network analysis/project/wikipedia_link_de")
wikilinks = read.graph(file="excerpt.tsv")
setwd("~/Code/computational network analysis/project/yeast")
yeast <- read.graph(file="YeastL.net", format="pajek")
plot.igraph(yeast)
plot.igraph(yeast, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.02, edge.arrow.size=0.2, edge.width = 0.2, layout=layout.kamada.kawai)
centralization(yeast)
centralization.degree(yeast)
centralization.betweenness(yeast)
centralization.closeness(yeast)
centralization.evcent(yeast)
setwd("~/Code/computational network analysis/project/wikispeedia_paths-and-graph")
wikispeedia <- read.graph("network", format="lgl")
centralization.degree(wikispeedia)
plot.igraph(wikispeedia, vertex.size = 2, vertex.label=NA, edge.arrow.width=0.02, edge.arrow.size=0.2, edge.width = 0.2, layout=layout.kamada.kawai)
View(data)
View(data)
data[c(1:3)]
data_min = data[c(1:3)]
data_min
ncol(data_min)
nrow(data_min)
subset(data, Age != NA & Age != "")
subset(data_min, Age != NA & Age != "")
subset(data_min, Age != NA | Age != "")
data_min
na.omit(data_min)
data_min
na.omit(data_min)
data_min&data=WoW
data_min&data="WoW"
data_min&data=="WoW"
data_min&Game == "WoW"
View(data_min)
data_min$Game == "WoW"
data_min$Game == NA
data_min$Game == "NA"
data_min$Game == ""
subset(data_min, Age != NA | Age != "")
data_min$Age == NA
data_min$Age == "NA"
na.omit(data_min)
nrow(na.omit(data_min))
nrow(data_min)
data_min = na-omit(data_min)
data_min = na.omit(data_min)
str(data_min)
str(data)
data_min
data_min[data_min==""] <- NA
data_min
View(data_min)
View(data)
View(data_min)
View(data)
View(data_min)
View(data)
data_min = data[c(1:3)]
View(data_min)
data_min[data_min==""] <- NA
View(data_min)
data_min = na.omit(data_min)
str(data.min)
str(data_min)
View(data_min)
data_min2 = na.omit(data_min)
data_min2 = data[c(1:3)]
data_min2 = na.omit(data_min2)
dim(data_min)
View(data_min)
View(data_min2)
View(data_min)
str(data_min2)
str(data)
str(data)
dim(data_min)
aggregate(value ~ Gender + Age + Game, FUN = sum, data=data_min)
data_min["number"] <- 1
data_min
aggregate(number ~ Gender + Age + Game, FUN = sum, data=data_min)
aggregate(number ~ Gender + Age + Game, FUN = sum, data=data_min)
aggregateData = aggregate(number ~ Gender + Age + Game, FUN = sum, data=data_min)
do.call(paste, c(aggregateData[c("Gender", "Age")], sep = ""))
do.call(paste, c(aggregateData[c("Gender", "Age", "Game")], sep = ""))
View(aggregateData)
aggregateData[aggregateData=="male"]
aggregateData[aggregateData=="male"] = "m"
View(aggregateData)
levels(aggregateData$Gender)
aggregateData[aggregateData==NA] = "male"
View(aggregateData)
View(aggregateData)
levels(aggregateData$Gender)
levels(aggregateData$Gender)[0]
levels(aggregateData$Gender)[1]
levels(aggregateData$Gender)[2]
levels(aggregateData$Gender)[3]
aggregateData = aggregate(number ~ Gender + Age + Game, FUN = sum, data=data_min)
View(aggregateData)
levels(aggregateData$Gender)[3]
levels(aggregateData$Gender)[3] = "m"
levels(aggregateData$Gender)[3]
levels(aggregateData$Gender)[2]
levels(aggregateData$Gender)[2] = "f"
View(aggregateData)
do.call(paste, c(aggregateData[c("Gender", "Age", "Game")], sep = ""))
aggregateData$personId = do.call(paste, c(aggregateData[c("Gender", "Age", "Game")], sep = ""))
View(aggregateData)
aggregateData[,c(5,3,4)]
aggregateData = aggregateData[,c(5,3,4)]
aggregateData$personId = do.call(paste, c(aggregateData[c("Gender", "Age", "Game")], sep = ""))
table(aggregateData)
aggregateData
View(aggregateData)
str(aggregateData)
View(aggregateData)
j <- graph.bipartite( rep(0:1,length=10), c(1:10))
print(j, v=TRUE)
j <- graph.bipartite( rep(0:1,length=10), c(1:10))
print(j, v=TRUE)
plot.igraph(j)
gameGraph <- graph.edgelist(aggregateData)
gameGraph <- graph.edgelist(aggregateData[,c(1,2)])
tmp = aggregateData[,c(1,2)]
tmp
gameGraph <- graph.edgelist(tmp
)
gameGraph <- graph.edgelist(as.matrix(tmp))
plot gameGraph
plot(gameGraph)
gameGraph = graph.edgeList(as.matrix(aggregateData[,c(1,2)]))
gameGraph = graph.edgelist(as.matrix(aggregateData[,c(1,2)]))
plot.igraph(gameGraphoh)
plot.igraph(gameGraph)
V(gameGraph)$type = V(gameGraph)$name %in% get.edgelist(gameGraph)[,1]
gameGraph
get.edgelist(gameGraph)
E(gameGraph)$weight=as.numeric(get.edgelist(gameGraph)[,3])
get.edglelist(gameGraph)
get.edgelist(gameGraph)
aggregateData
aggregateData[,3]
aggregateData[,2]
aggregateData[,1]
E(gameGraph)$weight=as.numeric(aggregateData[,3])
E(gameGraph)
E(gameGraph)$weight
E(gameGraph)
plot.igraph(gameGraph)
bipartite.projection (gameGraph, multiplicity = TRUE)
bipartite.projection (gameGraph, multiplicity = TRUE)$proj2
gameGraphProjection = bipartite.projection (gameGraph, multiplicity = TRUE)$proj2
gameGraphProjection
plot.igraph(gameGraphProjection)
g
edge.betweenness.community(g)
shortest.graphs(g)
shortest.paths(g)
str(shortest.paths(g))
str(g)
summary(g)
str(shortest.paths(g))
vcount(shortest.paths(g))
vcount(g)
ncol(shortest.paths(g))
nrow(shortest.paths(g))
edge.betweenness.community(g)
igraph.plot(g)
plot.igraph(g)
edge.betweenness(g)
edge.betweenness(g)
str(edge.betweenness(g))
ecount(g)
edgeBetweenness = edge.betweenness(g)
max(edgeBetweenness)
which.max(edgeBetweenness)
edgeBetweennessCommunity = edge.betweenness.community(g)
modularity(edgeBetweennessCommunity)
plot(edgeBetweennessCommunity)
plot(edgeBetweennessCommunity, g)
plot(edgeBetweennessCommunity, g, vertex.size=2)
plot(edgeBetweennessCommunity, g, vertex.size=1)
plot(edgeBetweennessCommunity, g, vertex.size=6)
plot(edgeBetweennessCommunity, g, vertex.size=6, vertex.label=NA)
plot(edgeBetweennessCommunity, g, vertex.size=6, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2)
plot(edgeBetweennessCommunity, g, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2)
plot(edgeBetweennessCommunity, g, vertex.size=10, vertex.label=NA, edge.arrow.width=0.2, edge.width = 0.2)
setwd("~/Code/computational network analysis/exercise 3")
